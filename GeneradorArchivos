package fundamentosProgramacion;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;

public class GenerateInfoFiles {

    /**
     * Método para generar un archivo plano pseudoaleatorio de ventas de un vendedor.
     *
     * @param randomSalesCount Cantidad de ventas aleatorias.
     * @param name             Nombre del vendedor.
     * @param id               ID del vendedor.
     */
    public static void createSalesMenFile(int randomSalesCount, String name, long id) {
        Random random = new Random();
        try (FileWriter writer = new FileWriter("salesmen_" + id + ".txt")) {
            for (int i = 0; i < randomSalesCount; i++) {
                writer.write("CC;" + id + "\n");
                for (int j = 0; j < random.nextInt(10) + 1; j++) {
                    int productId = random.nextInt(100) + 1; // Id de producto aleatorio entre 1 y 100
                    int quantity = random.nextInt(100) + 1; // Cantidad vendida aleatoria entre 1 y 100
                    writer.write(productId + ";" + quantity + "\n");
                }
            }
            System.out.println("Archivo de ventas del vendedor " + name + " creado correctamente.");
        } catch (IOException e) {
            System.err.println("Error al crear el archivo de ventas del vendedor " + name + ": " + e.getMessage());
        }
    }

    /**
     * Método para crear un archivo con información pseudoaleatoria de productos.
     *
     * @param productsCount Cantidad de productos.
     */
    public static void createProductsFile(int productsCount) {
        Random random = new Random();
        try (FileWriter writer = new FileWriter("products.txt")) {
            for (int i = 0; i < productsCount; i++) {
                int productId = i + 1; // ID de producto incremental
                String productName = "Product_" + productId; // Nombre de producto
                double price = random.nextDouble() * 1000; // Precio aleatorio entre 0 y 1000
                writer.write(productId + ";" + productName + ";" + price + "\n");
            }
            System.out.println("Archivo de productos creado correctamente.");
        } catch (IOException e) {
            System.err.println("Error al crear el archivo de productos: " + e.getMessage());
        }
    }

    /**
     * Método para crear un archivo con información pseudoaleatoria de vendedores.
     *
     * @param salesmanCount Cantidad de vendedores.
     */
    public static void createSalesManInfoFile(int salesmanCount) {
        Random random = new Random();
        String[] names = {"Alexis", "Alice", "Michael", "Emma", "Daniel", "Olivia", "David", "Sophia", "James", "Emily"};
        String[] lastNames = {"Smith", "Johnson", "Williams", "Jones", "Brown", "Davis", "Miller", "Wilson", "Moore", "Taylor"};
        try (FileWriter writer = new FileWriter("salesmen_info.txt")) {
            for (int i = 0; i < salesmanCount; i++) {
                int documentType = random.nextInt(2) + 1; // Tipo de documento aleatorio entre 1 y 2
                long documentNumber = random.nextLong(); // Número de documento aleatorio
                String name = names[random.nextInt(names.length)]; // Nombre aleatorio de la lista
                String lastName = lastNames[random.nextInt(lastNames.length)]; // Apellido aleatorio de la lista
                writer.write(documentType + ";" + documentNumber + ";" + name + ";" + lastName + "\n");
            }
            System.out.println("Archivo de información de vendedores creado correctamente.");
        } catch (IOException e) {
            System.err.println("Error al crear el archivo de información de vendedores: " + e.getMessage());
        }
    }

    /**
     * Método principal que ejecuta ejemplos de uso y genera archivos de prueba.
     *
     * @param args Argumentos de línea de comandos (no utilizados).
     */
    public static void main(String[] args) {
        // Crear un archivo de ventas para un vendedor específico
        createSalesMenFile(10, "Alexis", 123456789);

        // Crear un archivo con información de productos
        createProductsFile(20);

        // Crear un archivo con información de vendedores
        createSalesManInfoFile(5);

        // Generar archivos de prueba para el programa
        generateTestFiles();

        // Ejemplo adicional: Mostrar el contenido del archivo de información de vendedores
        try {
            // Leer el archivo de información de vendedores
            Scanner scanner = new Scanner(new File("salesmen_info.txt"));
            System.out.println("Contenido del archivo de información de vendedores:");
            while (scanner.hasNextLine()) {
                System.out.println(scanner.nextLine());
            }
            scanner.close();
        } catch (FileNotFoundException e) {
            System.err.println("Archivo de información de vendedores no encontrado.");
        }
    

        // Generar archivos de prueba
        generateTestFiles();
    }

    /**
     * Método para generar archivos de prueba.
     */
    private static void generateTestFiles() {
        createSalesMenFile(5, "TestVendedor1", 111111111);
        createSalesMenFile(8, "TestVendedor2", 222222222);
        createSalesMenFile(3, "TestVendedor3", 333333333);
        createProductsFile(10);
        createSalesManInfoFile(3);
    }
}


